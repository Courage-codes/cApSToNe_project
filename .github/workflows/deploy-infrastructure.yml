name: Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      force_recreate:
        description: 'Force recreate resources'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  deploy-infrastructure:
    runs-on: ubuntu-latest
    environment: dev
    outputs:
      bucket-name: ${{ steps.create-s3.outputs.bucket-name }}
      firehose-stream: ${{ steps.create-firehose.outputs.stream-name }}
      cluster-name: ${{ steps.create-cluster.outputs.cluster-name }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set environment variables
      run: |
        echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        echo "BUCKET_NAME=crm-interactions-raw-dev" >> $GITHUB_ENV
        echo "STREAM_NAME=crm-interactions-stream-dev" >> $GITHUB_ENV
        echo "CLUSTER_NAME=crm-producer-cluster-dev" >> $GITHUB_ENV
    
    - name: Create S3 Bucket
      id: create-s3
      run: |
        if aws s3api head-bucket --bucket crm-interactions-raw-dev 2>/dev/null; then
          echo "S3 bucket already exists: crm-interactions-raw-dev"
        else
          aws s3api create-bucket \
            --bucket crm-interactions-raw-dev \
            --region ${{ env.AWS_REGION }}
          
          aws s3api put-bucket-versioning \
            --bucket crm-interactions-raw-dev \
            --versioning-configuration Status=Enabled
          
          aws s3api put-bucket-lifecycle-configuration \
            --bucket crm-interactions-raw-dev \
            --lifecycle-configuration '{
              "Rules": [{
                "ID": "DeleteOldData",
                "Status": "Enabled",
                "Expiration": {"Days": 90}
              }]
            }'
          
          echo "Created S3 bucket: crm-interactions-raw-dev"
        fi
        
        echo "bucket-name=crm-interactions-raw-dev" >> $GITHUB_OUTPUT
        
        # Store in Parameter Store for other workflows
        aws ssm put-parameter \
          --name "/crm-pipeline/dev/bucket-name" \
          --value "crm-interactions-raw-dev" \
          --type "String" \
          --overwrite
    
    - name: Create IAM Roles
      run: |
        # Create Firehose delivery role
        if ! aws iam get-role --role-name firehose-delivery-role-dev 2>/dev/null; then
          aws iam create-role \
            --role-name firehose-delivery-role-dev \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "firehose.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }'
          
          aws iam put-role-policy \
            --role-name firehose-delivery-role-dev \
            --policy-name S3DeliveryPolicy \
            --policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Action": [
                  "s3:AbortMultipartUpload",
                  "s3:GetBucketLocation",
                  "s3:GetObject",
                  "s3:ListBucket",
                  "s3:ListBucketMultipartUploads",
                  "s3:PutObject"
                ],
                "Resource": [
                  "arn:aws:s3:::crm-interactions-raw-dev",
                  "arn:aws:s3:::crm-interactions-raw-dev/*"
                ]
              }]
            }'
          
          echo "Created Firehose delivery role"
        fi
        
        # Create ECS task execution role
        if ! aws iam get-role --role-name ecsTaskExecutionRole-dev 2>/dev/null; then
          aws iam create-role \
            --role-name ecsTaskExecutionRole-dev \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }'
          
          aws iam attach-role-policy \
            --role-name ecsTaskExecutionRole-dev \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
          
          echo "Created ECS task execution role"
        fi
        
        # Create ECS task role
        if ! aws iam get-role --role-name ecsTaskRole-dev 2>/dev/null; then
          aws iam create-role \
            --role-name ecsTaskRole-dev \
            --assume-role-policy-document '{
              "Version": "2012-10-17",
              "Statement": [{
                "Effect": "Allow",
                "Principal": {"Service": "ecs-tasks.amazonaws.com"},
                "Action": "sts:AssumeRole"
              }]
            }'
          
          aws iam attach-role-policy \
            --role-name ecsTaskRole-dev \
            --policy-arn arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess
          
          echo "Created ECS task role"
        fi
        
        # Wait for IAM roles to be ready
        sleep 30
    
    - name: Create CloudWatch Log Groups
      run: |
        # Create log group for ECS tasks
        aws logs create-log-group \
          --log-group-name /ecs/crm-producer-dev \
          --retention-in-days 30 || true
        
        # Create log group for Firehose
        aws logs create-log-group \
          --log-group-name /aws/kinesisfirehose/crm-interactions-dev \
          --retention-in-days 30 || true
        
        echo "CloudWatch log groups ready"
    
    - name: Create Kinesis Firehose Stream
      id: create-firehose
      run: |
        if aws firehose describe-delivery-stream --delivery-stream-name crm-interactions-stream-dev 2>/dev/null; then
          echo "Firehose stream already exists: crm-interactions-stream-dev"
        else
          # Update firehose config with current bucket
          sed "s/BUCKET_NAME_PLACEHOLDER/crm-interactions-raw-dev/g" config/firehose-config.json > /tmp/firehose-config.json
          sed -i "s/ACCOUNT_ID_PLACEHOLDER/${{ secrets.AWS_ACCOUNT_ID }}/g" /tmp/firehose-config.json
          sed -i "s/ENVIRONMENT_PLACEHOLDER/dev/g" /tmp/firehose-config.json
          
          aws firehose create-delivery-stream \
            --delivery-stream-name crm-interactions-stream-dev \
            --delivery-stream-type DirectPut \
            --s3-destination-configuration file:///tmp/firehose-config.json
          
          echo "Created Firehose stream: crm-interactions-stream-dev"
        fi
        
        echo "stream-name=crm-interactions-stream-dev" >> $GITHUB_OUTPUT
        
        # Store in Parameter Store
        aws ssm put-parameter \
          --name "/crm-pipeline/dev/firehose-stream" \
          --value "crm-interactions-stream-dev" \
          --type "String" \
          --overwrite
    
    - name: Create ECS Cluster
      id: create-cluster
      run: |
        if aws ecs describe-clusters --clusters crm-producer-cluster-dev --query 'clusters[0].clusterName' --output text 2>/dev/null | grep -q crm-producer-cluster-dev; then
          echo "ECS cluster already exists: crm-producer-cluster-dev"
        else
          aws ecs create-cluster \
            --cluster-name crm-producer-cluster-dev \
            --capacity-providers FARGATE \
            --default-capacity-provider-strategy capacityProvider=FARGATE,weight=1
          
          echo "Created ECS cluster: crm-producer-cluster-dev"
        fi
        
        echo "cluster-name=crm-producer-cluster-dev" >> $GITHUB_OUTPUT
        
        # Store in Parameter Store
        aws ssm put-parameter \
          --name "/crm-pipeline/dev/cluster-name" \
          --value "crm-producer-cluster-dev" \
          --type "String" \
          --overwrite
    
    - name: Create Security Group
      run: |
        # Get default VPC
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=is-default,Values=true" --query 'Vpcs[0].VpcId' --output text)
        
        # Create security group
        SG_ID=$(aws ec2 create-security-group \
          --group-name crm-producer-sg-dev \
          --description "Security group for CRM producer" \
          --vpc-id $VPC_ID \
          --query 'GroupId' --output text 2>/dev/null || \
          aws ec2 describe-security-groups \
            --filters "Name=group-name,Values=crm-producer-sg-dev" \
            --query 'SecurityGroups[0].GroupId' --output text)
        
        # Allow outbound HTTPS traffic
        aws ec2 authorize-security-group-egress \
          --group-id $SG_ID \
          --protocol tcp \
          --port 443 \
          --cidr 0.0.0.0/0 2>/dev/null || true
        
        # Allow outbound HTTP traffic
        aws ec2 authorize-security-group-egress \
          --group-id $SG_ID \
          --protocol tcp \
          --port 80 \
          --cidr 0.0.0.0/0 2>/dev/null || true
        
        # Store security group ID
        aws ssm put-parameter \
          --name "/crm-pipeline/dev/security-group-id" \
          --value "$SG_ID" \
          --type "String" \
          --overwrite
        
        echo "Security group ready: $SG_ID"
    
    - name: Output Summary
      run: |
        echo "Infrastructure deployment completed for environment: dev"
        echo "S3 Bucket: crm-interactions-raw-dev"
        echo "Firehose Stream: crm-interactions-stream-dev"
        echo "ECS Cluster: crm-producer-cluster-dev"