name: Cleanup Environment

on:
  workflow_dispatch:
    inputs:
      confirm_deletion:
        description: 'Type "DELETE" to confirm'
        required: true
        type: string
      preserve_s3:
        description: 'Preserve S3 bucket (recommended)'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: us-east-1
  ENVIRONMENT: dev

jobs:
  cleanup:
    runs-on: ubuntu-latest
    environment: dev
    
    steps:
    - name: Validate deletion confirmation
      run: |
        if [ "${{ inputs.confirm_deletion }}" != "DELETE" ]; then
          echo "❌ Deletion not confirmed. Please type 'DELETE' to confirm."
          exit 1
        fi
        
        if [ "$ENVIRONMENT" = "prod" ]; then
          echo "❌ Production environment cleanup is not allowed through this workflow."
          exit 1
        fi
        
        echo "✅ Deletion confirmed for environment: $ENVIRONMENT"
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Set environment variables
      run: |
        echo "ENVIRONMENT=dev" >> $GITHUB_ENV
        echo "BUCKET_NAME=crm-interactions-raw-dev" >> $GITHUB_ENV
        echo "STREAM_NAME=crm-interactions-stream-dev" >> $GITHUB_ENV
        echo "CLUSTER_NAME=crm-producer-cluster-dev" >> $GITHUB_ENV
        echo "SERVICE_NAME=crm-producer-service-dev" >> $GITHUB_ENV
    
    - name: Check and delete ECS service
      run: |
        echo "🔍 Checking if ECS service exists: $SERVICE_NAME"
        
        # Check if service exists
        if aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME 2>/dev/null | grep -q "serviceName"; then
          
          echo "📋 ECS service found: $SERVICE_NAME"
          
          # Check service status
          SERVICE_STATUS=$(aws ecs describe-services \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME \
            --query 'services[0].status' \
            --output text 2>/dev/null)
          
          if [ "$SERVICE_STATUS" = "ACTIVE" ]; then
            echo "📉 Scaling service to 0 tasks..."
            aws ecs update-service \
              --cluster $CLUSTER_NAME \
              --service $SERVICE_NAME \
              --desired-count 0
            
            echo "⏳ Waiting for service to scale down..."
            aws ecs wait services-stable \
              --cluster $CLUSTER_NAME \
              --services $SERVICE_NAME
          fi
          
          echo "🗑️ Deleting ECS service..."
          aws ecs delete-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME
          
          echo "✅ Deleted ECS service: $SERVICE_NAME"
          
          # Wait for network interfaces to begin cleanup
          echo "⏳ Waiting for network interface cleanup..."
          sleep 90
        else
          echo "ℹ️ ECS service not found or already deleted: $SERVICE_NAME"
        fi
    
    - name: Check and delete ECS cluster
      run: |
        echo "🔍 Checking if ECS cluster exists: $CLUSTER_NAME"
        
        # Check if cluster exists and is active
        if aws ecs describe-clusters \
          --clusters $CLUSTER_NAME 2>/dev/null | grep -q "clusterName"; then
          
          CLUSTER_STATUS=$(aws ecs describe-clusters \
            --clusters $CLUSTER_NAME \
            --query 'clusters[0].status' \
            --output text 2>/dev/null)
          
          if [ "$CLUSTER_STATUS" = "ACTIVE" ]; then
            echo "📋 ECS cluster found: $CLUSTER_NAME"
            aws ecs delete-cluster --cluster $CLUSTER_NAME
            echo "✅ Deleted ECS cluster: $CLUSTER_NAME"
          else
            echo "ℹ️ ECS cluster exists but not active: $CLUSTER_NAME (Status: $CLUSTER_STATUS)"
          fi
        else
          echo "ℹ️ ECS cluster not found or already deleted: $CLUSTER_NAME"
        fi
    
    - name: Check and delete Kinesis Firehose stream
      run: |
        echo "🔍 Checking if Firehose stream exists: $STREAM_NAME"
        
        # Check if Firehose stream exists
        if aws firehose describe-delivery-stream \
          --delivery-stream-name $STREAM_NAME 2>/dev/null | grep -q "DeliveryStreamName"; then
          
          STREAM_STATUS=$(aws firehose describe-delivery-stream \
            --delivery-stream-name $STREAM_NAME \
            --query 'DeliveryStreamDescription.DeliveryStreamStatus' \
            --output text 2>/dev/null)
          
          echo "📋 Firehose stream found: $STREAM_NAME (Status: $STREAM_STATUS)"
          
          aws firehose delete-delivery-stream \
            --delivery-stream-name $STREAM_NAME
          
          echo "✅ Deleted Firehose stream: $STREAM_NAME"
        else
          echo "ℹ️ Firehose stream not found or already deleted: $STREAM_NAME"
        fi
    
    - name: Wait for network interface cleanup
      run: |
        echo "⏳ Waiting for network interfaces to fully detach..."
        
        # Get security group ID if it exists
        SG_ID=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=crm-producer-sg-dev" \
          --query 'SecurityGroups[0].GroupId' \
          --output text 2>/dev/null)
        
        if [ "$SG_ID" != "None" ] && [ -n "$SG_ID" ] && [ "$SG_ID" != "null" ]; then
          echo "🔍 Checking network interfaces for security group: $SG_ID"
          
          # Wait for network interfaces to detach
          for i in {1..12}; do
            INTERFACES=$(aws ec2 describe-network-interfaces \
              --filters "Name=group-id,Values=$SG_ID" \
              --query 'NetworkInterfaces[*].NetworkInterfaceId' \
              --output text 2>/dev/null)
            
            if [ -z "$INTERFACES" ] || [ "$INTERFACES" = "None" ]; then
              echo "✅ All network interfaces have detached"
              break
            else
              echo "⏳ Network interfaces still attached (check $i/12), waiting 30 seconds..."
              sleep 30
            fi
          done
        fi
        
        # Additional buffer for AWS cleanup
        sleep 60
    
    - name: Check and delete security group
      run: |
        echo "🔍 Checking if security group exists: crm-producer-sg-dev"
        
        # Check if security group exists
        SG_ID=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=crm-producer-sg-dev" \
          --query 'SecurityGroups[0].GroupId' \
          --output text 2>/dev/null)
        
        if [ "$SG_ID" != "None" ] && [ -n "$SG_ID" ] && [ "$SG_ID" != "null" ]; then
          echo "📋 Security group found: $SG_ID"
          
          # Final check for dependencies
          INTERFACES=$(aws ec2 describe-network-interfaces \
            --filters "Name=group-id,Values=$SG_ID" \
            --query 'NetworkInterfaces[*].NetworkInterfaceId' \
            --output text 2>/dev/null)
          
          if [ -n "$INTERFACES" ] && [ "$INTERFACES" != "None" ]; then
            echo "⚠️ Network interfaces still attached: $INTERFACES"
            echo "⏳ Waiting additional time for cleanup..."
            sleep 120
          fi
          
          # Attempt deletion with retry
          for attempt in {1..3}; do
            echo "🔄 Attempt $attempt to delete security group: $SG_ID"
            
            if aws ec2 delete-security-group --group-id $SG_ID 2>/dev/null; then
              echo "✅ Security group deleted successfully: $SG_ID"
              break
            else
              if [ $attempt -eq 3 ]; then
                echo "❌ Failed to delete security group after 3 attempts"
                echo "ℹ️ You may need to delete it manually later"
              else
                echo "⏳ Deletion failed, waiting 60 seconds..."
                sleep 60
              fi
            fi
          done
        else
          echo "ℹ️ Security group not found or already deleted: crm-producer-sg-dev"
        fi
    
    - name: Check and delete IAM roles
      run: |
        echo "🔍 Checking and deleting IAM roles..."
        
        # Check and delete Firehose delivery role
        if aws iam get-role --role-name firehose-delivery-role-dev 2>/dev/null >/dev/null; then
          echo "📋 Found Firehose delivery role"
          
          # Remove attached policies first
          aws iam delete-role-policy \
            --role-name firehose-delivery-role-dev \
            --policy-name S3DeliveryPolicy 2>/dev/null || true
          
          aws iam delete-role --role-name firehose-delivery-role-dev 2>/dev/null
          echo "✅ Deleted Firehose delivery role"
        else
          echo "ℹ️ Firehose delivery role not found"
        fi
        
        # Check and delete ECS task execution role
        if aws iam get-role --role-name ecsTaskExecutionRole-dev 2>/dev/null >/dev/null; then
          echo "📋 Found ECS task execution role"
          
          # Detach managed policies first
          aws iam detach-role-policy \
            --role-name ecsTaskExecutionRole-dev \
            --policy-arn arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy 2>/dev/null || true
          
          aws iam delete-role --role-name ecsTaskExecutionRole-dev 2>/dev/null
          echo "✅ Deleted ECS task execution role"
        else
          echo "ℹ️ ECS task execution role not found"
        fi
        
        # Check and delete ECS task role
        if aws iam get-role --role-name ecsTaskRole-dev 2>/dev/null >/dev/null; then
          echo "📋 Found ECS task role"
          
          # Detach managed policies first
          aws iam detach-role-policy \
            --role-name ecsTaskRole-dev \
            --policy-arn arn:aws:iam::aws:policy/AmazonKinesisFirehoseFullAccess 2>/dev/null || true
          
          aws iam delete-role --role-name ecsTaskRole-dev 2>/dev/null
          echo "✅ Deleted ECS task role"
        else
          echo "ℹ️ ECS task role not found"
        fi
    
    - name: Check and delete CloudWatch log groups
      run: |
        echo "🔍 Checking and deleting CloudWatch log groups..."
        
        # Check and delete ECS log group
        if aws logs describe-log-groups \
          --log-group-name-prefix /ecs/crm-producer-dev 2>/dev/null | grep -q "logGroupName"; then
          
          echo "📋 Found ECS CloudWatch log group"
          aws logs delete-log-group --log-group-name /ecs/crm-producer-dev 2>/dev/null
          echo "✅ Deleted ECS CloudWatch log group"
        else
          echo "ℹ️ ECS CloudWatch log group not found"
        fi
        
        # Check and delete Firehose log group
        if aws logs describe-log-groups \
          --log-group-name-prefix /aws/kinesisfirehose/crm-interactions-dev 2>/dev/null | grep -q "logGroupName"; then
          
          echo "📋 Found Firehose CloudWatch log group"
          aws logs delete-log-group --log-group-name /aws/kinesisfirehose/crm-interactions-dev 2>/dev/null
          echo "✅ Deleted Firehose CloudWatch log group"
        else
          echo "ℹ️ Firehose CloudWatch log group not found"
        fi
    
    - name: Check and delete ECR repository
      run: |
        echo "🔍 Checking if ECR repository exists: crm-producer"
        
        # Check if ECR repository exists
        if aws ecr describe-repositories \
          --repository-names crm-producer 2>/dev/null | grep -q "repositoryName"; then
          
          echo "📋 Found ECR repository: crm-producer"
          aws ecr delete-repository \
            --repository-name crm-producer \
            --force 2>/dev/null
          echo "✅ Deleted ECR repository: crm-producer"
        else
          echo "ℹ️ ECR repository not found: crm-producer"
        fi
    
    - name: Handle S3 bucket
      run: |
        echo "🔍 Checking S3 bucket: $BUCKET_NAME"
        
        # Check if S3 bucket exists
        if aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
          echo "📋 Found S3 bucket: $BUCKET_NAME"
          
          if [ "${{ inputs.preserve_s3 }}" = "true" ]; then
            echo "💾 S3 bucket preserved: $BUCKET_NAME"
            echo "ℹ️ To delete manually later: aws s3 rb s3://$BUCKET_NAME --force"
          else
            echo "🗑️ Deleting S3 bucket contents..."
            aws s3 rm s3://$BUCKET_NAME --recursive 2>/dev/null || true
            
            echo "🗑️ Deleting S3 bucket..."
            aws s3api delete-bucket --bucket $BUCKET_NAME 2>/dev/null
            echo "✅ Deleted S3 bucket: $BUCKET_NAME"
          fi
        else
          echo "ℹ️ S3 bucket not found: $BUCKET_NAME"
        fi
    
    - name: Clean up Parameter Store
      run: |
        echo "🔍 Cleaning up Parameter Store entries..."
        
        # Check and delete each parameter
        PARAMS=(
          "/crm-pipeline/dev/bucket-name"
          "/crm-pipeline/dev/firehose-stream"
          "/crm-pipeline/dev/cluster-name"
          "/crm-pipeline/dev/security-group-id"
        )
        
        for param in "${PARAMS[@]}"; do
          if aws ssm get-parameter --name "$param" 2>/dev/null >/dev/null; then
            aws ssm delete-parameter --name "$param" 2>/dev/null
            echo "✅ Deleted parameter: $param"
          else
            echo "ℹ️ Parameter not found: $param"
          fi
        done
    
    - name: Cleanup summary
      run: |
        echo "======================================="
        echo "🎉 CLEANUP COMPLETED"
        echo "======================================="
        echo "✅ Environment: $ENVIRONMENT"
        echo "✅ All existence checks performed"
        echo "✅ Only existing resources were deleted"
        echo "✅ No errors for missing resources"
        
        if [ "${{ inputs.preserve_s3 }}" = "true" ]; then
          echo "💾 S3 bucket preserved: $BUCKET_NAME"
        else
          echo "✅ S3 bucket processed: $BUCKET_NAME"
        fi
        
        echo "======================================="
        echo "🎯 CRM pipeline cleanup completed successfully!"
